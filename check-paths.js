#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—É—Ç–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ
 * –ó–∞–ø—É—Å–∫: node check-paths.js
 */

const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
function findFiles(dir, extensions) {
    const files = [];
    
    function traverse(currentDir) {
        const items = fs.readdirSync(currentDir);
        
        for (const item of items) {
            const fullPath = path.join(currentDir, item);
            const stat = fs.statSync(fullPath);
            
            if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
                traverse(fullPath);
            } else if (stat.isFile() && extensions.some(ext => item.endsWith(ext))) {
                files.push(fullPath);
            }
        }
    }
    
    traverse(dir);
    return files;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø—É—Ç–µ–π –≤ —Ñ–∞–π–ª–µ
function checkFilePaths(filePath) {
    const content = fs.readFileSync(filePath, 'utf8');
    const lines = content.split('\n');
    const issues = [];
    
    const problematicPatterns = [
        /href=["']\/data\//g,
        /src=["']\/data\//g,
        /href=["']\/assets\//g,
        /src=["']\/assets\//g
    ];
    
    lines.forEach((line, index) => {
        problematicPatterns.forEach(pattern => {
            const matches = line.match(pattern);
            if (matches) {
                issues.push({
                    line: index + 1,
                    content: line.trim(),
                    pattern: pattern.source
                });
            }
        });
    });
    
    return issues;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ...\n');
    
    const htmlFiles = findFiles('.', ['.html']);
    const jsFiles = findFiles('.', ['.js']);
    
    let totalIssues = 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML —Ñ–∞–π–ª—ã
    console.log('üìÑ HTML —Ñ–∞–π–ª—ã:');
    htmlFiles.forEach(file => {
        const issues = checkFilePaths(file);
        if (issues.length > 0) {
            console.log(`\n‚ùå ${file}:`);
            issues.forEach(issue => {
                console.log(`   –°—Ç—Ä–æ–∫–∞ ${issue.line}: ${issue.content}`);
                totalIssues++;
            });
        }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º JS —Ñ–∞–π–ª—ã
    console.log('\nüìú JavaScript —Ñ–∞–π–ª—ã:');
    jsFiles.forEach(file => {
        const issues = checkFilePaths(file);
        if (issues.length > 0) {
            console.log(`\n‚ùå ${file}:`);
            issues.forEach(issue => {
                console.log(`   –°—Ç—Ä–æ–∫–∞ ${issue.line}: ${issue.content}`);
                totalIssues++;
            });
        }
    });
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –Ω–∞–π–¥–µ–Ω–æ ${totalIssues} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø—É—Ç–µ–π`);
    
    if (totalIssues === 0) {
        console.log('‚úÖ –í—Å–µ –ø—É—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!');
    } else {
        console.log('‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã');
    }
}

main();
